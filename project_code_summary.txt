---
src/main/java/com/example/dashboard/model/Application.java
---
package com.example.dashboard.model;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Application {
    private String name;
    private List<Environment> environments;
}

---
src/main/java/com/example/dashboard/model/Environment.java
---
package com.example.dashboard.model;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Environment {
    private String name;
    private List<Server> servers;
}

---
src/main/java/com/example/dashboard/model/Server.java
---
package com.example.dashboard.model;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Server {
    private String name;
    private String ip;
    private String os;
    private List<Service> services;
}

---
src/main/java/com/example/dashboard/model/Service.java
---
package com.example.dashboard.model;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Service {
    private String name;
    private String type;
    private String cmd;
    private String startscript;
    private String dbtype;
    private String tnsalias;
}

---
src/main/java/com/example/dashboard/model/ApplicationList.java
---
package com.example.dashboard.model;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApplicationList {
    private List<Application> applications;
}

---
src/main/java/com/example/dashboard/service/YamlParserService.java
---
package com.example.dashboard.service;

import com.example.dashboard.model.Application;
import com.example.dashboard.model.ApplicationList;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;
import org.yaml.snakeyaml.TypeDescription;
import java.io.InputStream;
import java.util.List;

@Service
public class YamlParserService {
    
    public List<Application> parseYaml() {
        try {
            Constructor constructor = new Constructor(ApplicationList.class);
            TypeDescription applicationListType = new TypeDescription(ApplicationList.class);
            applicationListType.addPropertyParameters("applications", Application.class);
            constructor.addTypeDescription(applicationListType);
            
            Yaml yaml = new Yaml(constructor);
            InputStream inputStream = new ClassPathResource("example.yaml").getInputStream();
            ApplicationList applicationList = yaml.load(inputStream);
            return applicationList.getApplications();
        } catch (Exception e) {
            throw new RuntimeException("Error parsing YAML file", e);
        }
    }
}

---
src/main/java/com/example/dashboard/controller/DashboardController.java
---
package com.example.dashboard.controller;

import com.example.dashboard.model.Application;
import com.example.dashboard.service.YamlParserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import java.util.List;

@Controller
public class DashboardController {

    @Autowired
    private YamlParserService yamlParserService;

    @GetMapping("/")
    public String dashboard(Model model) {
        List<Application> applications = yamlParserService.parseYaml();
        model.addAttribute("applications", applications);
        return "dashboard";
    }
}

---
src/main/java/com/example/dashboard/DashboardApplication.java
---
package com.example.dashboard;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DashboardApplication {
    public static void main(String[] args) {
        SpringApplication.run(DashboardApplication.class, args);
    }
}

---
src/main/resources/templates/dashboard.html
---
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Application Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .tab-content {
            padding: 20px;
        }
        .nav-tabs {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h1 class="mb-4">Application Dashboard</h1>
        
        <ul class="nav nav-tabs" id="appTabs" role="tablist">
            <li class="nav-item" th:each="app, appStat : ${applications}">
                <a class="nav-link" th:classappend="${appStat.first} ? 'active'" 
                   th:id="'app-' + ${appStat.index} + '-tab'"
                   data-bs-toggle="tab" 
                   th:data-bs-target="'#app-' + ${appStat.index}"
                   role="tab" 
                   th:text="${app.name}">
                </a>
            </li>
        </ul>

        <div class="tab-content" id="appTabContent">
            <div class="tab-pane fade" th:each="app, appStat : ${applications}"
                 th:classappend="${appStat.first} ? 'show active'"
                 th:id="'app-' + ${appStat.index}"
                 role="tabpanel">
                
                <div class="card mb-4" th:each="env : ${app.environments}">
                    <div class="card-header">
                        <h4 th:text="${env.name + ' Environment'}"></h4>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Server Name</th>
                                        <th>IP Address</th>
                                        <th>OS</th>
                                        <th>Services</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr th:each="server : ${env.servers}">
                                        <td th:text="${server.name}"></td>
                                        <td th:text="${server.ip}"></td>
                                        <td th:text="${server.os}"></td>
                                        <td>
                                            <table class="table table-sm">
                                                <thead>
                                                    <tr>
                                                        <th>Name</th>
                                                        <th>Type</th>
                                                        <th>Command/Script</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr th:each="service : ${server.services}">
                                                        <td th:text="${service.name}"></td>
                                                        <td th:text="${service.type}"></td>
                                                        <td>
                                                            <span th:if="${service.cmd}" th:text="${service.cmd}"></span>
                                                            <span th:if="${service.startscript}" th:text="${service.startscript}"></span>
                                                            <span th:if="${service.dbtype}" th:text="${service.dbtype + ' - ' + service.tnsalias}"></span>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

---
src/main/resources/example.yaml
---
applications:
  - name: ExampleApp
    environments: 
      - name: production
        servers:
          - name: server1
            ip: 332.10.1.1
            os: Linux
            services:
              - name: iis
                type: app
                cmd: "iisreset /force"
              - name: MyApp
                type: app
                cmd: "start MyApp.exe"
          - name: server2
            ip: 332.10.1.2
            os: Windows
            services:
              - name: tomcat
                type: app
                startscript: /data/tomcat/bin/startup.sh
          - name: server3
            ip: 332.10.1.3
            os: Linux
            services:
              - name: db
                type: db
                dbtype: oracle
                tnsalias: orcl

  - name: ECommerceApp
    environments:
      - name: production
        servers:
          - name: web-server
            ip: 192.168.1.10
            os: Linux
            services:
              - name: nginx
                type: app
                cmd: "systemctl restart nginx"
              - name: nodejs
                type: app
                cmd: "pm2 restart all"
          - name: db-server
            ip: 192.168.1.11
            os: Linux
            services:
              - name: postgres
                type: db
                dbtype: postgresql
                tnsalias: ecommerce_db
      - name: staging
        servers:
          - name: staging-server
            ip: 192.168.2.10
            os: Linux
            services:
              - name: docker
                type: app
                cmd: "docker-compose up -d"

  - name: MobileBackend
    environments:
      - name: production
        servers:
          - name: api-server
            ip: 10.0.1.5
            os: Linux
            services:
              - name: spring-boot
                type: app
                startscript: /opt/backend/start.sh
              - name: redis
                type: cache
                cmd: "redis-cli ping"
          - name: mongo-server
            ip: 10.0.1.6
            os: Linux
            services:
              - name: mongodb
                type: db
                dbtype: mongodb
                tnsalias: mobile_db
      - name: development
        servers:
          - name: dev-server
            ip: 10.0.2.5
            os: macOS
            services:
              - name: local-mongo
                type: db
                dbtype: mongodb
                tnsalias: dev_db 